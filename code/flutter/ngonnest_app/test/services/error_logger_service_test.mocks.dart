// Mocks generated by Mockito 5.4.6 from annotations
// in ngonnest_app/test/services/error_logger_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:convert' as _i14;
import 'dart:io' as _i9;
import 'dart:typed_data' as _i15;

import 'package:device_info_plus/device_info_plus.dart' as _i10;
import 'package:device_info_plus/src/model/android_device_info.dart' as _i2;
import 'package:device_info_plus/src/model/ios_device_info.dart' as _i3;
import 'package:device_info_plus/src/model/linux_device_info.dart' as _i4;
import 'package:device_info_plus/src/model/macos_device_info.dart' as _i6;
import 'package:device_info_plus/src/model/web_browser_info.dart' as _i5;
import 'package:device_info_plus/src/model/windows_device_info.dart' as _i7;
import 'package:device_info_plus_platform_interface/device_info_plus_platform_interface.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i13;
import 'package:package_info_plus/package_info_plus.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeAndroidDeviceInfo_0 extends _i1.SmartFake
    implements _i2.AndroidDeviceInfo {
  _FakeAndroidDeviceInfo_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIosDeviceInfo_1 extends _i1.SmartFake implements _i3.IosDeviceInfo {
  _FakeIosDeviceInfo_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLinuxDeviceInfo_2 extends _i1.SmartFake
    implements _i4.LinuxDeviceInfo {
  _FakeLinuxDeviceInfo_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWebBrowserInfo_3 extends _i1.SmartFake
    implements _i5.WebBrowserInfo {
  _FakeWebBrowserInfo_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMacOsDeviceInfo_4 extends _i1.SmartFake
    implements _i6.MacOsDeviceInfo {
  _FakeMacOsDeviceInfo_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWindowsDeviceInfo_5 extends _i1.SmartFake
    implements _i7.WindowsDeviceInfo {
  _FakeWindowsDeviceInfo_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBaseDeviceInfo_6 extends _i1.SmartFake
    implements _i8.BaseDeviceInfo {
  _FakeBaseDeviceInfo_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUri_7 extends _i1.SmartFake implements Uri {
  _FakeUri_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDirectory_8 extends _i1.SmartFake implements _i9.Directory {
  _FakeDirectory_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileSystemEntity_9 extends _i1.SmartFake
    implements _i9.FileSystemEntity {
  _FakeFileSystemEntity_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileStat_10 extends _i1.SmartFake implements _i9.FileStat {
  _FakeFileStat_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFile_11 extends _i1.SmartFake implements _i9.File {
  _FakeFile_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDateTime_12 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRandomAccessFile_13 extends _i1.SmartFake
    implements _i9.RandomAccessFile {
  _FakeRandomAccessFile_13(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeIOSink_14 extends _i1.SmartFake implements _i9.IOSink {
  _FakeIOSink_14(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DeviceInfoPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceInfoPlugin extends _i1.Mock implements _i10.DeviceInfoPlugin {
  MockDeviceInfoPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.AndroidDeviceInfo> get androidInfo =>
      (super.noSuchMethod(
            Invocation.getter(#androidInfo),
            returnValue: _i11.Future<_i2.AndroidDeviceInfo>.value(
              _FakeAndroidDeviceInfo_0(this, Invocation.getter(#androidInfo)),
            ),
          )
          as _i11.Future<_i2.AndroidDeviceInfo>);

  @override
  _i11.Future<_i3.IosDeviceInfo> get iosInfo =>
      (super.noSuchMethod(
            Invocation.getter(#iosInfo),
            returnValue: _i11.Future<_i3.IosDeviceInfo>.value(
              _FakeIosDeviceInfo_1(this, Invocation.getter(#iosInfo)),
            ),
          )
          as _i11.Future<_i3.IosDeviceInfo>);

  @override
  _i11.Future<_i4.LinuxDeviceInfo> get linuxInfo =>
      (super.noSuchMethod(
            Invocation.getter(#linuxInfo),
            returnValue: _i11.Future<_i4.LinuxDeviceInfo>.value(
              _FakeLinuxDeviceInfo_2(this, Invocation.getter(#linuxInfo)),
            ),
          )
          as _i11.Future<_i4.LinuxDeviceInfo>);

  @override
  _i11.Future<_i5.WebBrowserInfo> get webBrowserInfo =>
      (super.noSuchMethod(
            Invocation.getter(#webBrowserInfo),
            returnValue: _i11.Future<_i5.WebBrowserInfo>.value(
              _FakeWebBrowserInfo_3(this, Invocation.getter(#webBrowserInfo)),
            ),
          )
          as _i11.Future<_i5.WebBrowserInfo>);

  @override
  _i11.Future<_i6.MacOsDeviceInfo> get macOsInfo =>
      (super.noSuchMethod(
            Invocation.getter(#macOsInfo),
            returnValue: _i11.Future<_i6.MacOsDeviceInfo>.value(
              _FakeMacOsDeviceInfo_4(this, Invocation.getter(#macOsInfo)),
            ),
          )
          as _i11.Future<_i6.MacOsDeviceInfo>);

  @override
  _i11.Future<_i7.WindowsDeviceInfo> get windowsInfo =>
      (super.noSuchMethod(
            Invocation.getter(#windowsInfo),
            returnValue: _i11.Future<_i7.WindowsDeviceInfo>.value(
              _FakeWindowsDeviceInfo_5(this, Invocation.getter(#windowsInfo)),
            ),
          )
          as _i11.Future<_i7.WindowsDeviceInfo>);

  @override
  _i11.Future<_i8.BaseDeviceInfo> get deviceInfo =>
      (super.noSuchMethod(
            Invocation.getter(#deviceInfo),
            returnValue: _i11.Future<_i8.BaseDeviceInfo>.value(
              _FakeBaseDeviceInfo_6(this, Invocation.getter(#deviceInfo)),
            ),
          )
          as _i11.Future<_i8.BaseDeviceInfo>);
}

/// A class which mocks [PackageInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockPackageInfo extends _i1.Mock implements _i12.PackageInfo {
  MockPackageInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get appName =>
      (super.noSuchMethod(
            Invocation.getter(#appName),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#appName),
            ),
          )
          as String);

  @override
  String get packageName =>
      (super.noSuchMethod(
            Invocation.getter(#packageName),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#packageName),
            ),
          )
          as String);

  @override
  String get version =>
      (super.noSuchMethod(
            Invocation.getter(#version),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#version),
            ),
          )
          as String);

  @override
  String get buildNumber =>
      (super.noSuchMethod(
            Invocation.getter(#buildNumber),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#buildNumber),
            ),
          )
          as String);

  @override
  String get buildSignature =>
      (super.noSuchMethod(
            Invocation.getter(#buildSignature),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#buildSignature),
            ),
          )
          as String);

  @override
  Map<String, dynamic> get data =>
      (super.noSuchMethod(
            Invocation.getter(#data),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [Directory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectory extends _i1.Mock implements _i9.Directory {
  MockDirectory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#path),
            ),
          )
          as String);

  @override
  Uri get uri =>
      (super.noSuchMethod(
            Invocation.getter(#uri),
            returnValue: _FakeUri_7(this, Invocation.getter(#uri)),
          )
          as Uri);

  @override
  _i9.Directory get absolute =>
      (super.noSuchMethod(
            Invocation.getter(#absolute),
            returnValue: _FakeDirectory_8(this, Invocation.getter(#absolute)),
          )
          as _i9.Directory);

  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);

  @override
  _i9.Directory get parent =>
      (super.noSuchMethod(
            Invocation.getter(#parent),
            returnValue: _FakeDirectory_8(this, Invocation.getter(#parent)),
          )
          as _i9.Directory);

  @override
  _i11.Future<_i9.Directory> create({bool? recursive = false}) =>
      (super.noSuchMethod(
            Invocation.method(#create, [], {#recursive: recursive}),
            returnValue: _i11.Future<_i9.Directory>.value(
              _FakeDirectory_8(
                this,
                Invocation.method(#create, [], {#recursive: recursive}),
              ),
            ),
          )
          as _i11.Future<_i9.Directory>);

  @override
  void createSync({bool? recursive = false}) => super.noSuchMethod(
    Invocation.method(#createSync, [], {#recursive: recursive}),
    returnValueForMissingStub: null,
  );

  @override
  _i11.Future<_i9.Directory> createTemp([String? prefix]) =>
      (super.noSuchMethod(
            Invocation.method(#createTemp, [prefix]),
            returnValue: _i11.Future<_i9.Directory>.value(
              _FakeDirectory_8(this, Invocation.method(#createTemp, [prefix])),
            ),
          )
          as _i11.Future<_i9.Directory>);

  @override
  _i9.Directory createTempSync([String? prefix]) =>
      (super.noSuchMethod(
            Invocation.method(#createTempSync, [prefix]),
            returnValue: _FakeDirectory_8(
              this,
              Invocation.method(#createTempSync, [prefix]),
            ),
          )
          as _i9.Directory);

  @override
  _i11.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinks, []),
            returnValue: _i11.Future<String>.value(
              _i13.dummyValue<String>(
                this,
                Invocation.method(#resolveSymbolicLinks, []),
              ),
            ),
          )
          as _i11.Future<String>);

  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinksSync, []),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.method(#resolveSymbolicLinksSync, []),
            ),
          )
          as String);

  @override
  _i11.Future<_i9.Directory> rename(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#rename, [newPath]),
            returnValue: _i11.Future<_i9.Directory>.value(
              _FakeDirectory_8(this, Invocation.method(#rename, [newPath])),
            ),
          )
          as _i11.Future<_i9.Directory>);

  @override
  _i9.Directory renameSync(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#renameSync, [newPath]),
            returnValue: _FakeDirectory_8(
              this,
              Invocation.method(#renameSync, [newPath]),
            ),
          )
          as _i9.Directory);

  @override
  _i11.Future<_i9.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {#recursive: recursive}),
            returnValue: _i11.Future<_i9.FileSystemEntity>.value(
              _FakeFileSystemEntity_9(
                this,
                Invocation.method(#delete, [], {#recursive: recursive}),
              ),
            ),
          )
          as _i11.Future<_i9.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
    Invocation.method(#deleteSync, [], {#recursive: recursive}),
    returnValueForMissingStub: null,
  );

  @override
  _i11.Stream<_i9.FileSystemEntity> list({
    bool? recursive = false,
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#list, [], {
              #recursive: recursive,
              #followLinks: followLinks,
            }),
            returnValue: _i11.Stream<_i9.FileSystemEntity>.empty(),
          )
          as _i11.Stream<_i9.FileSystemEntity>);

  @override
  List<_i9.FileSystemEntity> listSync({
    bool? recursive = false,
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#listSync, [], {
              #recursive: recursive,
              #followLinks: followLinks,
            }),
            returnValue: <_i9.FileSystemEntity>[],
          )
          as List<_i9.FileSystemEntity>);

  @override
  _i11.Future<bool> exists() =>
      (super.noSuchMethod(
            Invocation.method(#exists, []),
            returnValue: _i11.Future<bool>.value(false),
          )
          as _i11.Future<bool>);

  @override
  bool existsSync() =>
      (super.noSuchMethod(
            Invocation.method(#existsSync, []),
            returnValue: false,
          )
          as bool);

  @override
  _i11.Future<_i9.FileStat> stat() =>
      (super.noSuchMethod(
            Invocation.method(#stat, []),
            returnValue: _i11.Future<_i9.FileStat>.value(
              _FakeFileStat_10(this, Invocation.method(#stat, [])),
            ),
          )
          as _i11.Future<_i9.FileStat>);

  @override
  _i9.FileStat statSync() =>
      (super.noSuchMethod(
            Invocation.method(#statSync, []),
            returnValue: _FakeFileStat_10(
              this,
              Invocation.method(#statSync, []),
            ),
          )
          as _i9.FileStat);

  @override
  _i11.Stream<_i9.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#watch, [], {
              #events: events,
              #recursive: recursive,
            }),
            returnValue: _i11.Stream<_i9.FileSystemEvent>.empty(),
          )
          as _i11.Stream<_i9.FileSystemEvent>);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i9.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.File get absolute =>
      (super.noSuchMethod(
            Invocation.getter(#absolute),
            returnValue: _FakeFile_11(this, Invocation.getter(#absolute)),
          )
          as _i9.File);

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.getter(#path),
            ),
          )
          as String);

  @override
  Uri get uri =>
      (super.noSuchMethod(
            Invocation.getter(#uri),
            returnValue: _FakeUri_7(this, Invocation.getter(#uri)),
          )
          as Uri);

  @override
  bool get isAbsolute =>
      (super.noSuchMethod(Invocation.getter(#isAbsolute), returnValue: false)
          as bool);

  @override
  _i9.Directory get parent =>
      (super.noSuchMethod(
            Invocation.getter(#parent),
            returnValue: _FakeDirectory_8(this, Invocation.getter(#parent)),
          )
          as _i9.Directory);

  @override
  _i11.Future<_i9.File> create({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#create, [], {
              #recursive: recursive,
              #exclusive: exclusive,
            }),
            returnValue: _i11.Future<_i9.File>.value(
              _FakeFile_11(
                this,
                Invocation.method(#create, [], {
                  #recursive: recursive,
                  #exclusive: exclusive,
                }),
              ),
            ),
          )
          as _i11.Future<_i9.File>);

  @override
  void createSync({bool? recursive = false, bool? exclusive = false}) =>
      super.noSuchMethod(
        Invocation.method(#createSync, [], {
          #recursive: recursive,
          #exclusive: exclusive,
        }),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<_i9.File> rename(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#rename, [newPath]),
            returnValue: _i11.Future<_i9.File>.value(
              _FakeFile_11(this, Invocation.method(#rename, [newPath])),
            ),
          )
          as _i11.Future<_i9.File>);

  @override
  _i9.File renameSync(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#renameSync, [newPath]),
            returnValue: _FakeFile_11(
              this,
              Invocation.method(#renameSync, [newPath]),
            ),
          )
          as _i9.File);

  @override
  _i11.Future<_i9.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {#recursive: recursive}),
            returnValue: _i11.Future<_i9.FileSystemEntity>.value(
              _FakeFileSystemEntity_9(
                this,
                Invocation.method(#delete, [], {#recursive: recursive}),
              ),
            ),
          )
          as _i11.Future<_i9.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
    Invocation.method(#deleteSync, [], {#recursive: recursive}),
    returnValueForMissingStub: null,
  );

  @override
  _i11.Future<_i9.File> copy(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#copy, [newPath]),
            returnValue: _i11.Future<_i9.File>.value(
              _FakeFile_11(this, Invocation.method(#copy, [newPath])),
            ),
          )
          as _i11.Future<_i9.File>);

  @override
  _i9.File copySync(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#copySync, [newPath]),
            returnValue: _FakeFile_11(
              this,
              Invocation.method(#copySync, [newPath]),
            ),
          )
          as _i9.File);

  @override
  _i11.Future<int> length() =>
      (super.noSuchMethod(
            Invocation.method(#length, []),
            returnValue: _i11.Future<int>.value(0),
          )
          as _i11.Future<int>);

  @override
  int lengthSync() =>
      (super.noSuchMethod(Invocation.method(#lengthSync, []), returnValue: 0)
          as int);

  @override
  _i11.Future<DateTime> lastAccessed() =>
      (super.noSuchMethod(
            Invocation.method(#lastAccessed, []),
            returnValue: _i11.Future<DateTime>.value(
              _FakeDateTime_12(this, Invocation.method(#lastAccessed, [])),
            ),
          )
          as _i11.Future<DateTime>);

  @override
  DateTime lastAccessedSync() =>
      (super.noSuchMethod(
            Invocation.method(#lastAccessedSync, []),
            returnValue: _FakeDateTime_12(
              this,
              Invocation.method(#lastAccessedSync, []),
            ),
          )
          as DateTime);

  @override
  _i11.Future<dynamic> setLastAccessed(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setLastAccessed, [time]),
            returnValue: _i11.Future<dynamic>.value(),
          )
          as _i11.Future<dynamic>);

  @override
  void setLastAccessedSync(DateTime? time) => super.noSuchMethod(
    Invocation.method(#setLastAccessedSync, [time]),
    returnValueForMissingStub: null,
  );

  @override
  _i11.Future<DateTime> lastModified() =>
      (super.noSuchMethod(
            Invocation.method(#lastModified, []),
            returnValue: _i11.Future<DateTime>.value(
              _FakeDateTime_12(this, Invocation.method(#lastModified, [])),
            ),
          )
          as _i11.Future<DateTime>);

  @override
  DateTime lastModifiedSync() =>
      (super.noSuchMethod(
            Invocation.method(#lastModifiedSync, []),
            returnValue: _FakeDateTime_12(
              this,
              Invocation.method(#lastModifiedSync, []),
            ),
          )
          as DateTime);

  @override
  _i11.Future<dynamic> setLastModified(DateTime? time) =>
      (super.noSuchMethod(
            Invocation.method(#setLastModified, [time]),
            returnValue: _i11.Future<dynamic>.value(),
          )
          as _i11.Future<dynamic>);

  @override
  void setLastModifiedSync(DateTime? time) => super.noSuchMethod(
    Invocation.method(#setLastModifiedSync, [time]),
    returnValueForMissingStub: null,
  );

  @override
  _i11.Future<_i9.RandomAccessFile> open({
    _i9.FileMode? mode = _i9.FileMode.read,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#open, [], {#mode: mode}),
            returnValue: _i11.Future<_i9.RandomAccessFile>.value(
              _FakeRandomAccessFile_13(
                this,
                Invocation.method(#open, [], {#mode: mode}),
              ),
            ),
          )
          as _i11.Future<_i9.RandomAccessFile>);

  @override
  _i9.RandomAccessFile openSync({_i9.FileMode? mode = _i9.FileMode.read}) =>
      (super.noSuchMethod(
            Invocation.method(#openSync, [], {#mode: mode}),
            returnValue: _FakeRandomAccessFile_13(
              this,
              Invocation.method(#openSync, [], {#mode: mode}),
            ),
          )
          as _i9.RandomAccessFile);

  @override
  _i11.Stream<List<int>> openRead([int? start, int? end]) =>
      (super.noSuchMethod(
            Invocation.method(#openRead, [start, end]),
            returnValue: _i11.Stream<List<int>>.empty(),
          )
          as _i11.Stream<List<int>>);

  @override
  _i9.IOSink openWrite({
    _i9.FileMode? mode = _i9.FileMode.write,
    _i14.Encoding? encoding = const _i14.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#openWrite, [], {
              #mode: mode,
              #encoding: encoding,
            }),
            returnValue: _FakeIOSink_14(
              this,
              Invocation.method(#openWrite, [], {
                #mode: mode,
                #encoding: encoding,
              }),
            ),
          )
          as _i9.IOSink);

  @override
  _i11.Future<_i15.Uint8List> readAsBytes() =>
      (super.noSuchMethod(
            Invocation.method(#readAsBytes, []),
            returnValue: _i11.Future<_i15.Uint8List>.value(_i15.Uint8List(0)),
          )
          as _i11.Future<_i15.Uint8List>);

  @override
  _i15.Uint8List readAsBytesSync() =>
      (super.noSuchMethod(
            Invocation.method(#readAsBytesSync, []),
            returnValue: _i15.Uint8List(0),
          )
          as _i15.Uint8List);

  @override
  _i11.Future<String> readAsString({
    _i14.Encoding? encoding = const _i14.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsString, [], {#encoding: encoding}),
            returnValue: _i11.Future<String>.value(
              _i13.dummyValue<String>(
                this,
                Invocation.method(#readAsString, [], {#encoding: encoding}),
              ),
            ),
          )
          as _i11.Future<String>);

  @override
  String readAsStringSync({_i14.Encoding? encoding = const _i14.Utf8Codec()}) =>
      (super.noSuchMethod(
            Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.method(#readAsStringSync, [], {#encoding: encoding}),
            ),
          )
          as String);

  @override
  _i11.Future<List<String>> readAsLines({
    _i14.Encoding? encoding = const _i14.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsLines, [], {#encoding: encoding}),
            returnValue: _i11.Future<List<String>>.value(<String>[]),
          )
          as _i11.Future<List<String>>);

  @override
  List<String> readAsLinesSync({
    _i14.Encoding? encoding = const _i14.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsLinesSync, [], {#encoding: encoding}),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i11.Future<_i9.File> writeAsBytes(
    List<int>? bytes, {
    _i9.FileMode? mode = _i9.FileMode.write,
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeAsBytes,
              [bytes],
              {#mode: mode, #flush: flush},
            ),
            returnValue: _i11.Future<_i9.File>.value(
              _FakeFile_11(
                this,
                Invocation.method(
                  #writeAsBytes,
                  [bytes],
                  {#mode: mode, #flush: flush},
                ),
              ),
            ),
          )
          as _i11.Future<_i9.File>);

  @override
  void writeAsBytesSync(
    List<int>? bytes, {
    _i9.FileMode? mode = _i9.FileMode.write,
    bool? flush = false,
  }) => super.noSuchMethod(
    Invocation.method(#writeAsBytesSync, [bytes], {#mode: mode, #flush: flush}),
    returnValueForMissingStub: null,
  );

  @override
  _i11.Future<_i9.File> writeAsString(
    String? contents, {
    _i9.FileMode? mode = _i9.FileMode.write,
    _i14.Encoding? encoding = const _i14.Utf8Codec(),
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #writeAsString,
              [contents],
              {#mode: mode, #encoding: encoding, #flush: flush},
            ),
            returnValue: _i11.Future<_i9.File>.value(
              _FakeFile_11(
                this,
                Invocation.method(
                  #writeAsString,
                  [contents],
                  {#mode: mode, #encoding: encoding, #flush: flush},
                ),
              ),
            ),
          )
          as _i11.Future<_i9.File>);

  @override
  void writeAsStringSync(
    String? contents, {
    _i9.FileMode? mode = _i9.FileMode.write,
    _i14.Encoding? encoding = const _i14.Utf8Codec(),
    bool? flush = false,
  }) => super.noSuchMethod(
    Invocation.method(
      #writeAsStringSync,
      [contents],
      {#mode: mode, #encoding: encoding, #flush: flush},
    ),
    returnValueForMissingStub: null,
  );

  @override
  _i11.Future<bool> exists() =>
      (super.noSuchMethod(
            Invocation.method(#exists, []),
            returnValue: _i11.Future<bool>.value(false),
          )
          as _i11.Future<bool>);

  @override
  bool existsSync() =>
      (super.noSuchMethod(
            Invocation.method(#existsSync, []),
            returnValue: false,
          )
          as bool);

  @override
  _i11.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinks, []),
            returnValue: _i11.Future<String>.value(
              _i13.dummyValue<String>(
                this,
                Invocation.method(#resolveSymbolicLinks, []),
              ),
            ),
          )
          as _i11.Future<String>);

  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinksSync, []),
            returnValue: _i13.dummyValue<String>(
              this,
              Invocation.method(#resolveSymbolicLinksSync, []),
            ),
          )
          as String);

  @override
  _i11.Future<_i9.FileStat> stat() =>
      (super.noSuchMethod(
            Invocation.method(#stat, []),
            returnValue: _i11.Future<_i9.FileStat>.value(
              _FakeFileStat_10(this, Invocation.method(#stat, [])),
            ),
          )
          as _i11.Future<_i9.FileStat>);

  @override
  _i9.FileStat statSync() =>
      (super.noSuchMethod(
            Invocation.method(#statSync, []),
            returnValue: _FakeFileStat_10(
              this,
              Invocation.method(#statSync, []),
            ),
          )
          as _i9.FileStat);

  @override
  _i11.Stream<_i9.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#watch, [], {
              #events: events,
              #recursive: recursive,
            }),
            returnValue: _i11.Stream<_i9.FileSystemEvent>.empty(),
          )
          as _i11.Stream<_i9.FileSystemEvent>);
}
