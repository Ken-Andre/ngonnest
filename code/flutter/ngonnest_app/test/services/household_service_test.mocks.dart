// Mocks generated by Mockito 5.4.6 from annotations
// in ngonnest_app/test/services/household_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ngonnest_app/models/alert.dart' as _i7;
import 'package:ngonnest_app/models/foyer.dart' as _i5;
import 'package:ngonnest_app/models/objet.dart' as _i6;
import 'package:ngonnest_app/repository/foyer_repository.dart' as _i8;
import 'package:ngonnest_app/services/database_service.dart' as _i3;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i3.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i4.Future<_i2.Database>);

  @override
  _i4.Future<_i5.Foyer?> getFoyer() =>
      (super.noSuchMethod(
            Invocation.method(#getFoyer, []),
            returnValue: _i4.Future<_i5.Foyer?>.value(),
          )
          as _i4.Future<_i5.Foyer?>);

  @override
  _i4.Future<int> insertFoyer(_i5.Foyer? foyer) =>
      (super.noSuchMethod(
            Invocation.method(#insertFoyer, [foyer]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> updateFoyer(_i5.Foyer? foyer) =>
      (super.noSuchMethod(
            Invocation.method(#updateFoyer, [foyer]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteFoyer(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFoyer, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i6.Objet>> getObjets({int? idFoyer, _i6.TypeObjet? type}) =>
      (super.noSuchMethod(
            Invocation.method(#getObjets, [], {#idFoyer: idFoyer, #type: type}),
            returnValue: _i4.Future<List<_i6.Objet>>.value(<_i6.Objet>[]),
          )
          as _i4.Future<List<_i6.Objet>>);

  @override
  _i4.Future<_i6.Objet?> getObjet(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getObjet, [id]),
            returnValue: _i4.Future<_i6.Objet?>.value(),
          )
          as _i4.Future<_i6.Objet?>);

  @override
  _i4.Future<int> insertObjet(_i6.Objet? objet) =>
      (super.noSuchMethod(
            Invocation.method(#insertObjet, [objet]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> updateObjet(_i6.Objet? objet) =>
      (super.noSuchMethod(
            Invocation.method(#updateObjet, [objet]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteObjet(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteObjet, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> getTotalObjetCount(int? idFoyer) =>
      (super.noSuchMethod(
            Invocation.method(#getTotalObjetCount, [idFoyer]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> getExpiringSoonObjetCount(int? idFoyer) =>
      (super.noSuchMethod(
            Invocation.method(#getExpiringSoonObjetCount, [idFoyer]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i6.Objet>> getObjetsWithAlerts(int? idFoyer) =>
      (super.noSuchMethod(
            Invocation.method(#getObjetsWithAlerts, [idFoyer]),
            returnValue: _i4.Future<List<_i6.Objet>>.value(<_i6.Objet>[]),
          )
          as _i4.Future<List<_i6.Objet>>);

  @override
  _i4.Future<Map<String, double>> getBudgetMensuel(int? idFoyer) =>
      (super.noSuchMethod(
            Invocation.method(#getBudgetMensuel, [idFoyer]),
            returnValue: _i4.Future<Map<String, double>>.value(
              <String, double>{},
            ),
          )
          as _i4.Future<Map<String, double>>);

  @override
  _i4.Future<List<_i7.Alert>> getAlerts({int? idFoyer, bool? unreadOnly}) =>
      (super.noSuchMethod(
            Invocation.method(#getAlerts, [], {
              #idFoyer: idFoyer,
              #unreadOnly: unreadOnly,
            }),
            returnValue: _i4.Future<List<_i7.Alert>>.value(<_i7.Alert>[]),
          )
          as _i4.Future<List<_i7.Alert>>);

  @override
  _i4.Future<_i7.Alert?> getAlert(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getAlert, [id]),
            returnValue: _i4.Future<_i7.Alert?>.value(),
          )
          as _i4.Future<_i7.Alert?>);

  @override
  _i4.Future<int> insertAlert(_i7.Alert? alert) =>
      (super.noSuchMethod(
            Invocation.method(#insertAlert, [alert]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> updateAlert(_i7.Alert? alert) =>
      (super.noSuchMethod(
            Invocation.method(#updateAlert, [alert]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteAlert(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAlert, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> insertObjetWithAlerts(_i6.Objet? objet, int? idFoyer) =>
      (super.noSuchMethod(
            Invocation.method(#insertObjetWithAlerts, [objet, idFoyer]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> markAlertAsRead(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#markAlertAsRead, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> deleteAllReadAlerts(int? idFoyer) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAllReadAlerts, [idFoyer]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<void> generateAlerts(int? idFoyer) =>
      (super.noSuchMethod(
            Invocation.method(#generateAlerts, [idFoyer]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> isConnectionValid() =>
      (super.noSuchMethod(
            Invocation.method(#isConnectionValid, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  Map<String, dynamic> getConnectionStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getConnectionStatus, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i4.Future<void> debugTableStructure() =>
      (super.noSuchMethod(
            Invocation.method(#debugTableStructure, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [FoyerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoyerRepository extends _i1.Mock implements _i8.FoyerRepository {
  MockFoyerRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.Foyer?> get() =>
      (super.noSuchMethod(
            Invocation.method(#get, []),
            returnValue: _i4.Future<_i5.Foyer?>.value(),
          )
          as _i4.Future<_i5.Foyer?>);

  @override
  _i4.Future<int> save(_i5.Foyer? foyer) =>
      (super.noSuchMethod(
            Invocation.method(#save, [foyer]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> update(_i5.Foyer? foyer) =>
      (super.noSuchMethod(
            Invocation.method(#update, [foyer]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<int> delete(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<bool> exists() =>
      (super.noSuchMethod(
            Invocation.method(#exists, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
